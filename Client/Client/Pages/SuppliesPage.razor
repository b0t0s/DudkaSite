@page "/Supplies"

@using Site.Shared.Dto
@using Site.Client.Domain
@inject HttpClient Http
@inject NavigationManager Navigation

<div class="container">
    <div class="row">
        @foreach (var group in SuppliesWithItems.GroupBy(s => s.Supply.StorageName).OrderByDescending(g => g.Key))
        {
            <div class="col-md-6">
                <h4>@group.Key</h4>
                <table class="table table-bordered">
                    <thead>
                        <tr>
                            <th>Supply Id</th>
                            <th>Supply Name</th>
                            <th>Supply Count</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var supplyItem in group.SelectMany(g => g.SupplyItems))
                        {
                            <tr>
                                <td>@supplyItem.ItemId</td>
                                <td>@supplyItem.ItemName</td>
                                <td>@supplyItem.SupplyItemNum</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
    </div>
</div>

@code {
    private List<SupplyWithItems> SuppliesWithItems { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        await GetSuppliesData();
    }

    public async Task GetSuppliesData()
    {
        try
        {
            var supplies = await Http.GetFromJsonAsync<List<Supply>>("Supplies/");

            for (int i = 0; i < 5; i++)
            {
                var supplyItems = await Http.GetFromJsonAsync<List<SupplyItem>>($"SupplyDetails/{supplies[i].SupplyId}");
                SuppliesWithItems.Add(new SupplyWithItems { Supply = supplies[i], SupplyItems = supplyItems });
            }
        }
        catch (HttpRequestException e)
        {
            Console.WriteLine($"HttpRequestException: {e.Message}");
        }
    }

}
